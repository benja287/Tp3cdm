
Tp3finaldemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  00000710  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001c8  008001c8  0000086c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e29  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d86  00000000  00000000  000028e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea0  00000000  00000000  0000366b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  0000450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000840  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed9  00000000  00000000  000051d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3c       	cpi	r26, 0xCB	; 203
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  9e:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciar_comunicacion_dht11>:
#include "serialPort.h"
#define TIEMPO_ESPERA_SOLICITUD_DHT11 1000  // Tiempo máximo de espera para la solicitud de datos (en microsegundos)
// Iniciar la comunicación con el sensor DHT11
void iniciar_comunicacion_dht11(void) {
	//SerialPort_Send_String("Iniciando comunicacion con el sensor DHT11\r\n");
	DDIR_DHT11 |= (1 << PIN_DHT11);  // Configurar el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	//   _delay_ms(20);
	PORT_DHT11 &= ~(1 << PIN_DHT11);  // Poner el pin en estado bajo
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <iniciar_comunicacion_dht11+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <iniciar_comunicacion_dht11+0x1c>
  c2:	00 00       	nop
	_delay_ms(20);  // Esperar al menos 18 ms
	PORT_DHT11 |= (1 << PIN_DHT11);  // Poner el pin en estado alto
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	25 e1       	ldi	r18, 0x15	; 21
  cc:	2a 95       	dec	r18
  ce:	f1 f7       	brne	.-4      	; 0xcc <iniciar_comunicacion_dht11+0x26>
  d0:	00 00       	nop
	_delay_us(4);  // Esperar 4 microsegundos
	DDIR_DHT11 &= ~(1 << PIN_DHT11);  // Configurar el pin como entrada
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <iniciar_comunicacion_dht11+0x36>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <iniciar_comunicacion_dht11+0x3c>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <leer_byte_dht11>:

uint8_t leer_byte_dht11(void) {
	uint8_t datos = 0;
	//_delay_us(160);

	for (uint8_t i = 0; i < 8; i++) {
  e6:	90 e0       	ldi	r25, 0x00	; 0
	DDIR_DHT11 &= ~(1 << PIN_DHT11);  // Configurar el pin como entrada
	_delay_us(160);
}

uint8_t leer_byte_dht11(void) {
	uint8_t datos = 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	//_delay_us(160);

	for (uint8_t i = 0; i < 8; i++) {
  ea:	17 c0       	rjmp	.+46     	; 0x11a <leer_byte_dht11+0x34>
		

		// Esperar a que el pin se ponga en alto indicando el inicio de la transmisión de un bit
		while (!(PINC & (1 << PIN_DHT11)) );
  ec:	30 9b       	sbis	0x06, 0	; 6
  ee:	fe cf       	rjmp	.-4      	; 0xec <leer_byte_dht11+0x6>
  f0:	25 ed       	ldi	r18, 0xD5	; 213
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <leer_byte_dht11+0xc>
  f6:	00 00       	nop

		// Esperar 40 microsegundos para posicionarse en la mitad del pulso
		_delay_us(40);

		if (PINC & (1 << PIN_DHT11)) {
  f8:	30 9b       	sbis	0x06, 0	; 6
  fa:	0e c0       	rjmp	.+28     	; 0x118 <leer_byte_dht11+0x32>
			// Si el pin sigue en alto después de 40us, es un "1"
			datos |= (1 << (7 - i));
  fc:	47 e0       	ldi	r20, 0x07	; 7
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	49 1b       	sub	r20, r25
 102:	51 09       	sbc	r21, r1
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <leer_byte_dht11+0x28>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	4a 95       	dec	r20
 110:	e2 f7       	brpl	.-8      	; 0x10a <leer_byte_dht11+0x24>
 112:	82 2b       	or	r24, r18

			// Esperar a que el pin se ponga en bajo indicando el final del bit
			while (PINC & (1 << PIN_DHT11) );
 114:	30 99       	sbic	0x06, 0	; 6
 116:	fe cf       	rjmp	.-4      	; 0x114 <leer_byte_dht11+0x2e>

uint8_t leer_byte_dht11(void) {
	uint8_t datos = 0;
	//_delay_us(160);

	for (uint8_t i = 0; i < 8; i++) {
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	98 30       	cpi	r25, 0x08	; 8
 11c:	38 f3       	brcs	.-50     	; 0xec <leer_byte_dht11+0x6>
			// Si el pin está en bajo después de 40us, es un "0"
			// Nada que hacer ya que el bit ya es "0" por defecto
		}
	}
	return datos;
}
 11e:	08 95       	ret

00000120 <leer_datos_dht11>:

// Leer los datos del sensor DHT11
uint8_t leer_datos_dht11(uint8_t *temperatura, uint8_t *humedad) {
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	00 d0       	rcall	.+0      	; 0x134 <leer_datos_dht11+0x14>
 134:	00 d0       	rcall	.+0      	; 0x136 <leer_datos_dht11+0x16>
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	7c 01       	movw	r14, r24
 13e:	6b 01       	movw	r12, r22
	//SerialPort_Send_String("Leyendo datos del sensor DHT11\r\n");
	iniciar_comunicacion_dht11();  // Iniciar la comunicación
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciar_comunicacion_dht11>

	uint16_t tiempo_espera_solicitud = TIEMPO_ESPERA_SOLICITUD_DHT11;
 144:	88 ee       	ldi	r24, 0xE8	; 232
 146:	93 e0       	ldi	r25, 0x03	; 3
	while (tiempo_espera_solicitud--) {  // Esperar la respuesta del sensor
 148:	03 c0       	rjmp	.+6      	; 0x150 <leer_datos_dht11+0x30>
 14a:	c9 01       	movw	r24, r18
		if (!(PINC & (1 << PIN_DHT11))) {
 14c:	30 9b       	sbis	0x06, 0	; 6
 14e:	05 c0       	rjmp	.+10     	; 0x15a <leer_datos_dht11+0x3a>
uint8_t leer_datos_dht11(uint8_t *temperatura, uint8_t *humedad) {
	//SerialPort_Send_String("Leyendo datos del sensor DHT11\r\n");
	iniciar_comunicacion_dht11();  // Iniciar la comunicación

	uint16_t tiempo_espera_solicitud = TIEMPO_ESPERA_SOLICITUD_DHT11;
	while (tiempo_espera_solicitud--) {  // Esperar la respuesta del sensor
 150:	9c 01       	movw	r18, r24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1
 156:	89 2b       	or	r24, r25
 158:	c1 f7       	brne	.-16     	; 0x14a <leer_datos_dht11+0x2a>
		if (!(PINC & (1 << PIN_DHT11))) {
			break;
		}
	}

	if (tiempo_espera_solicitud == 0) {  // Tiempo de espera agotado
 15a:	23 2b       	or	r18, r19
 15c:	31 f4       	brne	.+12     	; 0x16a <leer_datos_dht11+0x4a>
		SerialPort_Send_String("Error: Tiempo de espera agotado\r\n");
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 41 03 	call	0x682	; 0x682 <SerialPort_Send_String>
		return ERROR_TIEMPO_ESPERA_DHT11;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	2c c0       	rjmp	.+88     	; 0x1c2 <leer_datos_dht11+0xa2>
	}

	uint8_t datos[5] = {0};
 16a:	fe 01       	movw	r30, r28
 16c:	31 96       	adiw	r30, 0x01	; 1
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	df 01       	movw	r26, r30
 172:	1d 92       	st	X+, r1
 174:	8a 95       	dec	r24
 176:	e9 f7       	brne	.-6      	; 0x172 <leer_datos_dht11+0x52>
	for (uint8_t i = 0; i < 5; i++) {
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	0c c0       	rjmp	.+24     	; 0x194 <leer_datos_dht11+0x74>
		datos[i] = leer_byte_dht11();  // Leer cada byte de datos
 17c:	a1 2e       	mov	r10, r17
 17e:	b1 2c       	mov	r11, r1
 180:	0e 94 73 00 	call	0xe6	; 0xe6 <leer_byte_dht11>
 184:	e1 e0       	ldi	r30, 0x01	; 1
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ec 0f       	add	r30, r28
 18a:	fd 1f       	adc	r31, r29
 18c:	ea 0d       	add	r30, r10
 18e:	fb 1d       	adc	r31, r11
 190:	80 83       	st	Z, r24
		SerialPort_Send_String("Error: Tiempo de espera agotado\r\n");
		return ERROR_TIEMPO_ESPERA_DHT11;
	}

	uint8_t datos[5] = {0};
	for (uint8_t i = 0; i < 5; i++) {
 192:	1f 5f       	subi	r17, 0xFF	; 255
 194:	15 30       	cpi	r17, 0x05	; 5
 196:	90 f3       	brcs	.-28     	; 0x17c <leer_datos_dht11+0x5c>
		datos[i] = leer_byte_dht11();  // Leer cada byte de datos
	}

	uint8_t suma = datos[0] + datos[1] + datos[2] + datos[3];
 198:	39 81       	ldd	r19, Y+1	; 0x01
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	2b 81       	ldd	r18, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	83 0f       	add	r24, r19
 1a2:	82 0f       	add	r24, r18
 1a4:	89 0f       	add	r24, r25
	if (datos[4] != suma) {  // Verificar el checksum
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	89 17       	cp	r24, r25
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <leer_datos_dht11+0x98>
		SerialPort_Send_String("Error: Checksum incorrecto\r\n");
 1ac:	86 e2       	ldi	r24, 0x26	; 38
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 41 03 	call	0x682	; 0x682 <SerialPort_Send_String>
		return ERROR_CHECKSUM_DHT11;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <leer_datos_dht11+0xa2>
	}
	

	*humedad = datos[0];
 1b8:	f6 01       	movw	r30, r12
 1ba:	30 83       	st	Z, r19
	*temperatura = datos[2];
 1bc:	d7 01       	movw	r26, r14
 1be:	2c 93       	st	X, r18

	return OK_DHT11;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	af 90       	pop	r10
 1de:	08 95       	ret

000001e0 <bcd2dec>:
DS3231_WriteRegister(REG_HOURS, dec2bcd(horas));       // Escribe las horas (convertidas a BCD)
DS3231_WriteRegister(REG_DAY, dec2bcd(dia));           // Escribe el día de la semana (convertido a BCD)
DS3231_WriteRegister(REG_DATE, dec2bcd(fecha));        // Escribe el día del mes (convertido a BCD)
DS3231_WriteRegister(REG_MONTH, dec2bcd(mes));         // Escribe el mes (convertido a BCD)
DS3231_WriteRegister(REG_YEAR, dec2bcd(ano));          // Escribe el año (convertido a BCD)
}
 1e0:	98 2f       	mov	r25, r24
 1e2:	92 95       	swap	r25
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	99 0f       	add	r25, r25
 1e8:	29 2f       	mov	r18, r25
 1ea:	22 0f       	add	r18, r18
 1ec:	22 0f       	add	r18, r18
 1ee:	92 0f       	add	r25, r18
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	89 0f       	add	r24, r25
 1f4:	08 95       	ret

000001f6 <DS3231_ReadRegister>:
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
 1fa:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWI_Start>
 1fe:	80 ed       	ldi	r24, 0xD0	; 208
 200:	0e 94 72 03 	call	0x6e4	; 0x6e4 <TWI_Write>
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 72 03 	call	0x6e4	; 0x6e4 <TWI_Write>
 20a:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWI_Start>
 20e:	81 ed       	ldi	r24, 0xD1	; 209
 210:	0e 94 72 03 	call	0x6e4	; 0x6e4 <TWI_Write>
 214:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <TWI_Read_NACK>
 218:	c8 2f       	mov	r28, r24
 21a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <TWI_Stop>
 21e:	8c 2f       	mov	r24, r28
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <DS3231_GetTime>:

// Lee la hora y fecha actual del DS3231
void DS3231_GetTime(uint8_t *segundos, uint8_t *minutos, uint8_t *horas, uint8_t *dia, uint8_t *fecha, uint8_t *mes, uint8_t *ano) {
 224:	6f 92       	push	r6
 226:	7f 92       	push	r7
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	4c 01       	movw	r8, r24
 242:	5b 01       	movw	r10, r22
 244:	ea 01       	movw	r28, r20
 246:	39 01       	movw	r6, r18
*segundos = bcd2dec(DS3231_ReadRegister(REG_SECONDS));  // Lee y convierte los segundos de BCD a decimal
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 24e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 252:	f4 01       	movw	r30, r8
 254:	80 83       	st	Z, r24
*minutos = bcd2dec(DS3231_ReadRegister(REG_MINUTES));   // Lee y convierte los minutos de BCD a decimal
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 25c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 260:	f5 01       	movw	r30, r10
 262:	80 83       	st	Z, r24
*horas = bcd2dec(DS3231_ReadRegister(REG_HOURS));       // Lee y convierte las horas de BCD a decimal
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 26e:	88 83       	st	Y, r24
*dia = bcd2dec(DS3231_ReadRegister(REG_DAY));           // Lee y convierte el día de la semana de BCD a decimal
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 276:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 27a:	f3 01       	movw	r30, r6
 27c:	80 83       	st	Z, r24
*fecha = bcd2dec(DS3231_ReadRegister(REG_DATE));        // Lee y convierte el día del mes de BCD a decimal
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 284:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 288:	f8 01       	movw	r30, r16
 28a:	80 83       	st	Z, r24
*mes = bcd2dec(DS3231_ReadRegister(REG_MONTH));         // Lee y convierte el mes de BCD a decimal
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 296:	f7 01       	movw	r30, r14
 298:	80 83       	st	Z, r24
*ano = bcd2dec(DS3231_ReadRegister(REG_YEAR));          // Lee y convierte el año de BCD a decimal
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DS3231_ReadRegister>
 2a0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcd2dec>
 2a4:	f6 01       	movw	r30, r12
 2a6:	80 83       	st	Z, r24
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	8f 90       	pop	r8
 2c0:	7f 90       	pop	r7
 2c2:	6f 90       	pop	r6
 2c4:	08 95       	ret

000002c6 <__vector_18>:
#include "serialPort.h"
#include "mef.h"

extern volatile uint8_t enviar_datos; // Bandera para controlar el envío de datos

ISR(USART_RX_vect) {
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
	//SerialPort_Send_String("se recibio algun caracter\r\n");

	char recibir_caracter = UDR0; // Leer el carácter recibido
 2d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (recibir_caracter == 's' || recibir_caracter == 'S') {
 2d8:	83 37       	cpi	r24, 0x73	; 115
 2da:	11 f0       	breq	.+4      	; 0x2e0 <__vector_18+0x1a>
 2dc:	83 35       	cpi	r24, 0x53	; 83
 2de:	39 f4       	brne	.+14     	; 0x2ee <__vector_18+0x28>
		enviar_datos = !enviar_datos; // Alternar la bandera de enviar_datos
 2e0:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <__data_end>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	91 11       	cpse	r25, r1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
	}
}
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <main>:
volatile uint8_t flag_teclaS = 0;
volatile uint8_t flag_Paso2S = 0;
volatile uint8_t enviar_datos = 0; // Controla si se deben enviar los datos

int main(void) {
	Datos_Init(); // Inicializa la UART y la MEF
 2fc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Datos_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	83 ed       	ldi	r24, 0xD3	; 211
 304:	90 e3       	ldi	r25, 0x30	; 48
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0xa>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x14>
 310:	00 00       	nop

	while (1) {
		// Incrementar el contador cada segundo
		_delay_ms(1000); // Retraso de 1000ms
		// Incrementar el contador
		flag_Paso2S++;
 312:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <flag_Paso2S>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <flag_Paso2S>

		// Verificar si se deben enviar datos cada 2 segundos
		if (flag_Paso2S >= 1) {
 31c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <flag_Paso2S>
 320:	88 23       	and	r24, r24
 322:	71 f3       	breq	.-36     	; 0x300 <main+0x4>
			if (enviar_datos) {
 324:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 328:	81 11       	cpse	r24, r1
				Actualizar_Datos();
 32a:	0e 94 11 03 	call	0x622	; 0x622 <Actualizar_Datos>
			}
			// Resetear el contador después de encuestar y enviar datos
			flag_Paso2S = 0;
 32e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <flag_Paso2S>
 332:	e6 cf       	rjmp	.-52     	; 0x300 <main+0x4>

00000334 <estado_esperando>:
}


// Función para el estado esperando
void estado_esperando(void) {
	if (enviar_datos) {//Verifica si la variable global enviar_datos es verdadera
 334:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 338:	88 23       	and	r24, r24
 33a:	29 f0       	breq	.+10     	; 0x346 <estado_esperando+0x12>
		estado = ESTADO_Enviar_Datos;//cambia el estado actual (estado) a ESTADO_Enviar_Datos
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <estado>
		flag_Paso2S = 0;
 342:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <flag_Paso2S>
 346:	08 95       	ret

00000348 <convertir_a_cadena>:
	formatear_concatenar(buffer, segundos_str);
	formatear_concatenar(buffer, "\r\n");
}

// Función para convertir un entero a una cadena con ancho fijo
void convertir_a_cadena(uint8_t num, char* str, int width) {
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	db 01       	movw	r26, r22
 34e:	ea 01       	movw	r28, r20
	int i;
	for (i = width - 1; i >= 0; i--) {
 350:	9a 01       	movw	r18, r20
 352:	21 50       	subi	r18, 0x01	; 1
 354:	31 09       	sbc	r19, r1
 356:	16 c0       	rjmp	.+44     	; 0x384 <convertir_a_cadena+0x3c>
		str[i] = (num % 10) + '0';
 358:	fd 01       	movw	r30, r26
 35a:	e2 0f       	add	r30, r18
 35c:	f3 1f       	adc	r31, r19
 35e:	9d ec       	ldi	r25, 0xCD	; 205
 360:	89 9f       	mul	r24, r25
 362:	91 2d       	mov	r25, r1
 364:	11 24       	eor	r1, r1
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
 36a:	96 95       	lsr	r25
 36c:	79 2f       	mov	r23, r25
 36e:	77 0f       	add	r23, r23
 370:	57 2f       	mov	r21, r23
 372:	55 0f       	add	r21, r21
 374:	55 0f       	add	r21, r21
 376:	57 0f       	add	r21, r23
 378:	85 1b       	sub	r24, r21
 37a:	80 5d       	subi	r24, 0xD0	; 208
 37c:	80 83       	st	Z, r24
		num /= 10;
 37e:	89 2f       	mov	r24, r25
}

// Función para convertir un entero a una cadena con ancho fijo
void convertir_a_cadena(uint8_t num, char* str, int width) {
	int i;
	for (i = width - 1; i >= 0; i--) {
 380:	21 50       	subi	r18, 0x01	; 1
 382:	31 09       	sbc	r19, r1
 384:	33 23       	and	r19, r19
 386:	44 f7       	brge	.-48     	; 0x358 <convertir_a_cadena+0x10>
		str[i] = (num % 10) + '0';
		num /= 10;
	}
	str[width] = '\0';
 388:	ac 0f       	add	r26, r28
 38a:	bd 1f       	adc	r27, r29
 38c:	1c 92       	st	X, r1
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <formatear_concatenar>:

// Función para concatenar cadenas
void formatear_concatenar(char* dest, const char* src) {
 394:	fc 01       	movw	r30, r24
 396:	db 01       	movw	r26, r22
	while (*dest) {
 398:	01 c0       	rjmp	.+2      	; 0x39c <formatear_concatenar+0x8>
		dest++;
 39a:	31 96       	adiw	r30, 0x01	; 1
	str[width] = '\0';
}

// Función para concatenar cadenas
void formatear_concatenar(char* dest, const char* src) {
	while (*dest) {
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	fc cf       	rjmp	.-8      	; 0x39a <formatear_concatenar+0x6>
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <formatear_concatenar+0x16>
		dest++;
	}
	while (*src) {
		*dest++ = *src++;
 3a4:	11 96       	adiw	r26, 0x01	; 1
 3a6:	80 83       	st	Z, r24
 3a8:	31 96       	adiw	r30, 0x01	; 1
// Función para concatenar cadenas
void formatear_concatenar(char* dest, const char* src) {
	while (*dest) {
		dest++;
	}
	while (*src) {
 3aa:	8c 91       	ld	r24, X
 3ac:	81 11       	cpse	r24, r1
 3ae:	fa cf       	rjmp	.-12     	; 0x3a4 <formatear_concatenar+0x10>
		*dest++ = *src++;
	}
	*dest = '\0';
 3b0:	10 82       	st	Z, r1
 3b2:	08 95       	ret

000003b4 <formatearMensaje>:
estado_t estado;
void convertir_a_cadena(uint8_t num, char* str, int width);
void formatear_concatenar(char* dest, const char* src);

void formatearMensaje(char* buffer, size_t buffer_size, uint8_t temperatura, uint8_t humedad,
uint8_t fecha, uint8_t mes, uint8_t ano, uint8_t horas, uint8_t minutos, uint8_t segundos) {
 3b4:	6f 92       	push	r6
 3b6:	7f 92       	push	r7
 3b8:	8f 92       	push	r8
 3ba:	af 92       	push	r10
 3bc:	cf 92       	push	r12
 3be:	ef 92       	push	r14
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	6a 97       	sbiw	r28, 0x1a	; 26
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	3c 01       	movw	r6, r24
 3da:	84 2f       	mov	r24, r20
 3dc:	12 2f       	mov	r17, r18
	char hum_str[4];
	char fecha_str[3], mes_str[3], ano_str[3];
	char horas_str[3], minutos_str[3], segundos_str[3];

	// Convertir los números a cadenas
	convertir_a_cadena(temperatura, temp_str, 2);
 3de:	42 e0       	ldi	r20, 0x02	; 2
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	be 01       	movw	r22, r28
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(humedad, hum_str, 2);
 3ec:	42 e0       	ldi	r20, 0x02	; 2
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	be 01       	movw	r22, r28
 3f2:	6b 5f       	subi	r22, 0xFB	; 251
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	81 2f       	mov	r24, r17
 3f8:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(fecha, fecha_str, 2);
 3fc:	42 e0       	ldi	r20, 0x02	; 2
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	be 01       	movw	r22, r28
 402:	67 5f       	subi	r22, 0xF7	; 247
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	80 2f       	mov	r24, r16
 408:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(mes, mes_str, 2);
 40c:	42 e0       	ldi	r20, 0x02	; 2
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	be 01       	movw	r22, r28
 412:	64 5f       	subi	r22, 0xF4	; 244
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	8e 2d       	mov	r24, r14
 418:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(ano, ano_str, 2);
 41c:	42 e0       	ldi	r20, 0x02	; 2
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	be 01       	movw	r22, r28
 422:	61 5f       	subi	r22, 0xF1	; 241
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8c 2d       	mov	r24, r12
 428:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(horas, horas_str, 2);
 42c:	42 e0       	ldi	r20, 0x02	; 2
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	be 01       	movw	r22, r28
 432:	6e 5e       	subi	r22, 0xEE	; 238
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8a 2d       	mov	r24, r10
 438:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(minutos, minutos_str, 2);
 43c:	42 e0       	ldi	r20, 0x02	; 2
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	be 01       	movw	r22, r28
 442:	6b 5e       	subi	r22, 0xEB	; 235
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	88 2d       	mov	r24, r8
 448:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>
	convertir_a_cadena(segundos, segundos_str, 2);
 44c:	42 e0       	ldi	r20, 0x02	; 2
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	be 01       	movw	r22, r28
 452:	68 5e       	subi	r22, 0xE8	; 232
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f a1       	ldd	r24, Y+39	; 0x27
 458:	0e 94 a4 01 	call	0x348	; 0x348 <convertir_a_cadena>

	// Formatear y concatenar las cadenas
	buffer[0] = '\0'; // Inicializar el buffer con una cadena vacía
 45c:	f3 01       	movw	r30, r6
 45e:	10 82       	st	Z, r1
	formatear_concatenar(buffer, "TEMP: ");
 460:	63 e4       	ldi	r22, 0x43	; 67
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	c3 01       	movw	r24, r6
 466:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, temp_str);
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	c3 01       	movw	r24, r6
 472:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, "°C HUM: ");
 476:	6a e4       	ldi	r22, 0x4A	; 74
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	c3 01       	movw	r24, r6
 47c:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, hum_str);
 480:	be 01       	movw	r22, r28
 482:	6b 5f       	subi	r22, 0xFB	; 251
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	c3 01       	movw	r24, r6
 488:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, "% FECHA: ");
 48c:	63 e5       	ldi	r22, 0x53	; 83
 48e:	71 e0       	ldi	r23, 0x01	; 1
 490:	c3 01       	movw	r24, r6
 492:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, fecha_str);
 496:	be 01       	movw	r22, r28
 498:	67 5f       	subi	r22, 0xF7	; 247
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	c3 01       	movw	r24, r6
 49e:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, "/");
 4a2:	6d e5       	ldi	r22, 0x5D	; 93
 4a4:	71 e0       	ldi	r23, 0x01	; 1
 4a6:	c3 01       	movw	r24, r6
 4a8:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, mes_str);
 4ac:	be 01       	movw	r22, r28
 4ae:	64 5f       	subi	r22, 0xF4	; 244
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	c3 01       	movw	r24, r6
 4b4:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, "/");
 4b8:	6d e5       	ldi	r22, 0x5D	; 93
 4ba:	71 e0       	ldi	r23, 0x01	; 1
 4bc:	c3 01       	movw	r24, r6
 4be:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, ano_str);
 4c2:	be 01       	movw	r22, r28
 4c4:	61 5f       	subi	r22, 0xF1	; 241
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	c3 01       	movw	r24, r6
 4ca:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, " HORA: ");
 4ce:	6f e5       	ldi	r22, 0x5F	; 95
 4d0:	71 e0       	ldi	r23, 0x01	; 1
 4d2:	c3 01       	movw	r24, r6
 4d4:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, horas_str);
 4d8:	be 01       	movw	r22, r28
 4da:	6e 5e       	subi	r22, 0xEE	; 238
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	c3 01       	movw	r24, r6
 4e0:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, ":");
 4e4:	67 e6       	ldi	r22, 0x67	; 103
 4e6:	71 e0       	ldi	r23, 0x01	; 1
 4e8:	c3 01       	movw	r24, r6
 4ea:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, minutos_str);
 4ee:	be 01       	movw	r22, r28
 4f0:	6b 5e       	subi	r22, 0xEB	; 235
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	c3 01       	movw	r24, r6
 4f6:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, ":");
 4fa:	67 e6       	ldi	r22, 0x67	; 103
 4fc:	71 e0       	ldi	r23, 0x01	; 1
 4fe:	c3 01       	movw	r24, r6
 500:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, segundos_str);
 504:	be 01       	movw	r22, r28
 506:	68 5e       	subi	r22, 0xE8	; 232
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	c3 01       	movw	r24, r6
 50c:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
	formatear_concatenar(buffer, "\r\n");
 510:	65 ec       	ldi	r22, 0xC5	; 197
 512:	71 e0       	ldi	r23, 0x01	; 1
 514:	c3 01       	movw	r24, r6
 516:	0e 94 ca 01 	call	0x394	; 0x394 <formatear_concatenar>
}
 51a:	6a 96       	adiw	r28, 0x1a	; 26
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ef 90       	pop	r14
 530:	cf 90       	pop	r12
 532:	af 90       	pop	r10
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	6f 90       	pop	r6
 53a:	08 95       	ret

0000053c <estado_enviar_datos>:
		flag_Paso2S = 0;
	}
}

// Función para el estado de enviar datos
void estado_enviar_datos(void) {
 53c:	8f 92       	push	r8
 53e:	af 92       	push	r10
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	c5 54       	subi	r28, 0x45	; 69
 556:	d1 09       	sbc	r29, r1
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
	uint8_t segundos, minutos, horas, dia, fecha, mes, ano;
	char buffer_datos[60];

     
	// Leer datos del DHT11
	if (leer_datos_dht11(&temperatura, &humedad) == OK_DHT11) {
 562:	be 01       	movw	r22, r28
 564:	6e 5f       	subi	r22, 0xFE	; 254
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 90 00 	call	0x120	; 0x120 <leer_datos_dht11>
 570:	81 11       	cpse	r24, r1
 572:	29 c0       	rjmp	.+82     	; 0x5c6 <estado_enviar_datos+0x8a>
		// Leer la fecha y la hora del DS3231
		DS3231_GetTime(&segundos, &minutos, &horas, &dia, &fecha, &mes, &ano);
 574:	ce 01       	movw	r24, r28
 576:	09 96       	adiw	r24, 0x09	; 9
 578:	6c 01       	movw	r12, r24
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	7c 01       	movw	r14, r24
 57e:	8e 01       	movw	r16, r28
 580:	09 5f       	subi	r16, 0xF9	; 249
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	9e 01       	movw	r18, r28
 586:	2a 5f       	subi	r18, 0xFA	; 250
 588:	3f 4f       	sbci	r19, 0xFF	; 255
 58a:	ae 01       	movw	r20, r28
 58c:	4b 5f       	subi	r20, 0xFB	; 251
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	be 01       	movw	r22, r28
 592:	6c 5f       	subi	r22, 0xFC	; 252
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	05 97       	sbiw	r24, 0x05	; 5
 598:	0e 94 12 01 	call	0x224	; 0x224 <DS3231_GetTime>

		// Formatear el mensaje con los datos obtenidos
		formatearMensaje(buffer_datos, sizeof(buffer_datos), temperatura, humedad, fecha, mes, ano, horas, minutos, segundos);
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	8f 93       	push	r24
 5a0:	8c 80       	ldd	r8, Y+4	; 0x04
 5a2:	ad 80       	ldd	r10, Y+5	; 0x05
 5a4:	c9 84       	ldd	r12, Y+9	; 0x09
 5a6:	e8 84       	ldd	r14, Y+8	; 0x08
 5a8:	0f 81       	ldd	r16, Y+7	; 0x07
 5aa:	2a 81       	ldd	r18, Y+2	; 0x02
 5ac:	49 81       	ldd	r20, Y+1	; 0x01
 5ae:	6c e3       	ldi	r22, 0x3C	; 60
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	ce 01       	movw	r24, r28
 5b4:	0a 96       	adiw	r24, 0x0a	; 10
 5b6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <formatearMensaje>

		// Enviar el mensaje a la terminal serie
		SerialPort_Send_String(buffer_datos);
 5ba:	ce 01       	movw	r24, r28
 5bc:	0a 96       	adiw	r24, 0x0a	; 10
 5be:	0e 94 41 03 	call	0x682	; 0x682 <SerialPort_Send_String>
 5c2:	0f 90       	pop	r0
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <estado_enviar_datos+0x92>
		} else {
		SerialPort_Send_String("Error al leer el DHT11\r\n");
 5c6:	89 e6       	ldi	r24, 0x69	; 105
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 41 03 	call	0x682	; 0x682 <SerialPort_Send_String>
	}

	estado = ESTADO_Esperando; // Volver al estado esperando
 5ce:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <estado>
}
 5d2:	cb 5b       	subi	r28, 0xBB	; 187
 5d4:	df 4f       	sbci	r29, 0xFF	; 255
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	af 90       	pop	r10
 5f2:	8f 90       	pop	r8
 5f4:	08 95       	ret

000005f6 <MEF_Init>:

// Inicializa la MEF colocando el estado inicial como ESTADO_Esperando.
void MEF_Init(void) {
	estado = ESTADO_Esperando;
 5f6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <estado>
 5fa:	08 95       	ret

000005fc <Datos_Init>:
}

// Inicialización de datos y configuración UART
void Datos_Init() {
	SerialPort_Init(103);//inicializa el UART con una configuración específica, donde el valor 103 se usa para configurar la velocidad de transmisión y otros parámetros del UART, como la cantidad de bits de datos y la paridad
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	0e 94 1d 03 	call	0x63a	; 0x63a <SerialPort_Init>
	SerialPort_TX_Enable();//habilita la transmisión (TX) del UART, permitiendo que el microcontrolador pueda enviar datos a través del puerto serie.
 602:	0e 94 27 03 	call	0x64e	; 0x64e <SerialPort_TX_Enable>
	SerialPort_RX_Enable();//habilita la recepción (RX) del UART, permitiendo que el microcontrolador pueda recibir datos a través del puerto serie
 606:	0e 94 2d 03 	call	0x65a	; 0x65a <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // Habilitar interrupción RX completa
 60a:	0e 94 33 03 	call	0x666	; 0x666 <SerialPort_RX_Interrupt_Enable>
	sei(); // Habilitar interrupciones globales
 60e:	78 94       	sei
	MEF_Init();
 610:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MEF_Init>
	// Enviar mensaje inicial a la terminal serie
	SerialPort_Send_String("Presione la tecla 's' o 'S' para iniciar/detener el envío de datos.\r\n");
 614:	82 e8       	ldi	r24, 0x82	; 130
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 41 03 	call	0x682	; 0x682 <SerialPort_Send_String>
	TWI_Init(); // Inicializa el I2C
 61c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TWI_Init>
 620:	08 95       	ret

00000622 <Actualizar_Datos>:
}
void (*MEF[])(void) = {estado_esperando, estado_enviar_datos};
// Función para actualizar el estado actual
void Actualizar_Datos(void) {
	(*MEF[estado])(); // Ejecuta la función correspondiente al estado actual
 622:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <estado>
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	e0 50       	subi	r30, 0x00	; 0
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	01 90       	ld	r0, Z+
 632:	f0 81       	ld	r31, Z
 634:	e0 2d       	mov	r30, r0
 636:	09 95       	icall
 638:	08 95       	ret

0000063a <SerialPort_Init>:

}
//deshabilita las interrupciones del transmisor 
void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);//deshabilita la interrupción del registro de datos UDR0 vacío
 63a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 63e:	96 e0       	ldi	r25, 0x06	; 6
 640:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 644:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 648:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 64c:	08 95       	ret

0000064e <SerialPort_TX_Enable>:
 64e:	e1 ec       	ldi	r30, 0xC1	; 193
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	88 60       	ori	r24, 0x08	; 8
 656:	80 83       	st	Z, r24
 658:	08 95       	ret

0000065a <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);//habilita el receptor serie (RX)
 65a:	e1 ec       	ldi	r30, 0xC1	; 193
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	80 61       	ori	r24, 0x10	; 16
 662:	80 83       	st	Z, r24
 664:	08 95       	ret

00000666 <SerialPort_RX_Interrupt_Enable>:
}
//habilita las interrupciones del receptor
void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);//habilita la interrupción cuando  hay datos nuevos en el registro de datos UDR0
 666:	e1 ec       	ldi	r30, 0xC1	; 193
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	80 83       	st	Z, r24
 670:	08 95       	ret

00000672 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 672:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 676:	85 ff       	sbrs	r24, 5
 678:	fc cf       	rjmp	.-8      	; 0x672 <SerialPort_Wait_For_TX_Buffer_Free>
}
 67a:	08 95       	ret

0000067c <SerialPort_Send_Data>:
//envia un dato  a través del puerto  serie 
void SerialPort_Send_Data(char data){
	UDR0 = data;//escribe el dato en el registro de datos UDR0 para su transmisión 
 67c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 680:	08 95       	ret

00000682 <SerialPort_Send_String>:
}
//envia una cadena de caracteres   a través del puerto  serie 
void SerialPort_Send_String(char * msg){ //
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 68e:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ //recorre la cadena de caracteres  hasta encontrar el caracter nulo 
 690:	07 c0       	rjmp	.+14     	; 0x6a0 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms ademas espera hasta que el buffer de transmisión  este libre
 692:	0e 94 39 03 	call	0x672	; 0x672 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);//envia cada caracter  de la cadena
 696:	f8 01       	movw	r30, r16
 698:	80 81       	ld	r24, Z
 69a:	0e 94 3e 03 	call	0x67c	; 0x67c <SerialPort_Send_Data>
		i++;
 69e:	cf 5f       	subi	r28, 0xFF	; 255
}
//envia una cadena de caracteres   a través del puerto  serie 
void SerialPort_Send_String(char * msg){ //
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ //recorre la cadena de caracteres  hasta encontrar el caracter nulo 
 6a0:	87 01       	movw	r16, r14
 6a2:	0c 0f       	add	r16, r28
 6a4:	11 1d       	adc	r17, r1
 6a6:	f8 01       	movw	r30, r16
 6a8:	80 81       	ld	r24, Z
 6aa:	81 11       	cpse	r24, r1
 6ac:	f2 cf       	rjmp	.-28     	; 0x692 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms ademas espera hasta que el buffer de transmisión  este libre
		SerialPort_Send_Data(msg[i]);//envia cada caracter  de la cadena
		i++;
	}
}
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	08 95       	ret

000006ba <TWI_Init>:
}
uint8_t TWI_Read_ACK(void) {
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);//Configurar el registro de control TWI (TWCR) para recibir el próximo byte y enviar una señal de reconocimiento (ACK) al esclavo.
	while (!(TWCR & (1<<TWINT))); // Espera a que la lectura se complete
	return TWDR;
}
 6ba:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6be:	88 e4       	ldi	r24, 0x48	; 72
 6c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 6c4:	84 e0       	ldi	r24, 0x04	; 4
 6c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ca:	08 95       	ret

000006cc <TWI_Start>:
 6cc:	84 ea       	ldi	r24, 0xA4	; 164
 6ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6d6:	88 23       	and	r24, r24
 6d8:	e4 f7       	brge	.-8      	; 0x6d2 <TWI_Start+0x6>
 6da:	08 95       	ret

000006dc <TWI_Stop>:
 6dc:	84 e9       	ldi	r24, 0x94	; 148
 6de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6e2:	08 95       	ret

000006e4 <TWI_Write>:
 6e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6e8:	84 e8       	ldi	r24, 0x84	; 132
 6ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6f2:	88 23       	and	r24, r24
 6f4:	e4 f7       	brge	.-8      	; 0x6ee <TWI_Write+0xa>
 6f6:	08 95       	ret

000006f8 <TWI_Read_NACK>:

uint8_t TWI_Read_NACK(void) {
	TWCR = (1<<TWEN) | (1<<TWINT);//Configurar el registro de control TWI (TWCR) para recibir el próximo byte y no enviar una señal de reconocimiento (NACK) al esclavo
 6f8:	84 e8       	ldi	r24, 0x84	; 132
 6fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Espera a que la lectura se complete
 6fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 702:	88 23       	and	r24, r24
 704:	e4 f7       	brge	.-8      	; 0x6fe <TWI_Read_NACK+0x6>
	return TWDR;
 706:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
